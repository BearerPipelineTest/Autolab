<script>
  let observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (!mutation.addedNodes || mutation.addedNodes.length == 0) return

      if (mutation.addedNodes[0].className.includes("lm_goldenlayout")) {
        $('#hidden-js').html("<%= j javascript_include_tag("annotations.js") %><%= j javascript_include_tag("submission_view.js") %>")
        console.log(mutation.addedNodes.length);
      }
    })
  })

  observer.observe($('#speedgrader')[0], {
      childList: true
    , attributes: false
    , characterData: false
  })
  var fileComponents = [];
  <% if (params[:header_position] || (!@ctag_obj.nil? && !@ctag_obj.empty?)) %>
      <% if (params[:header_position]) %>
        fileComponents.push({
                  type: "component",
                  componentName: "file_tree",
                  title: "File Outline",
                  height: 25,
                });
      <% end %>
      <% unless @ctag_obj.nil? || @ctag_obj.empty? %>
        fileComponents.push({
                  type: "component",
                  componentName: "code_symbol_tree",
                  title: "Symbol Tree",
                  height: 25,
                });
      <% end %>
  <% end %>
  var content = [
      {
        type: "component",
        componentName: "code_viewer",
        title: "Code",
      },
      {
        type: "column",
        width: 20,
        content: [
          {
            type: "component",
            componentName: "annotation_pane",
            title: "Annotations",
            height: 57,
          },
          {
            type: "component",
            componentName: "grades",
            title: "Grades",
          },
        ],
      },
    ];
  if (fileComponents.length > 0) {
    content.unshift({
      type: "column",
            width: 20,
            content: fileComponents,
          })
  }
  var config = {
    content: [
      {
        type: "row",
        content: content,
      },
    ],
  };

  console.log("golden layout");

  var myLayout = new GoldenLayout(config, "#speedgrader");
  myLayout._isFullPage = true;

  myLayout.registerComponent("file_tree", function (container, state) {
      container.getElement().html("<%= j render(:partial => 'file_tree') %>");
  });
  myLayout.registerComponent("code_symbol_tree", function (container, state) {
      container.getElement().html("<%= j render(:partial => 'code_symbol_tree', :locals => {ctag_obj: @ctag_obj}) %>");
  });
  myLayout.registerComponent("code_viewer", function (container, state) {
      container.getElement().html("<%= j render(:partial => 'code_viewer') %>");
  });
  myLayout.registerComponent("annotation_pane", function (container, state) {
      container.getElement().html("<%= j render(:partial => 'annotation_pane') %>");
  });
  myLayout.registerComponent("grades", function (container, state) {
      container.getElement().html("<%= j render(:partial => 'grades') %>");
  });
  myLayout.init();

</script>
<div id="hidden-js" style="display: none">
</div>